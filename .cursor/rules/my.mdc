# Django 后端开发 + MySQL + RESTful风格 + JWT + Redis缓存 的Cursor规则示例

# 1. 项目结构
- 使用Django的app机制实现模块划分，提高代码复用和管理。
- 按照RESTful设计API，使用Django REST Framework定义序列化器、视图和路由。
- 使用urls.py定义清晰、语义化的路径。
- 组织数据库模型(models.py)，使用MySQL作为主数据库。

# 2. 认证与权限
- 使用JWT进行无状态认证，推荐集成第三方库如djangorestframework-simplejwt。
- 配置Token的有效期和刷新机制。
- 对敏感接口添加权限校验，结合DRF权限类进行控制。

# 3. 缓存策略
- 使用Redis作为缓存数据库，缓存热点数据和频繁查询结果。
- 配置Django缓存框架(cache framework)的Redis backend。
- 设计合理的缓存过期时间和失效策略，保证数据一致性。
- 对关键API接口使用缓存装饰器或手动控制缓存。

# 4. 数据库设计优化
- 避免N+1查询，使用select_related和prefetch_related优化关联查询。
- 合理设计索引以提升查询性能。
- 使用数据库连接池管理，提高并发处理能力。

# 5. 错误处理与日志
- 视图层使用try-except捕获异常，返回统一格式的错误响应。
- 使用Django的logging模块进行日志收集。
- 自定义404、500等错误页面，提高用户体验。

# 6. 项目性能
- 使用异步任务框架(Celery)处理耗时后台任务。
- 优化静态文件服务，支持CDN分发。
- 监控数据库和缓存性能，动态调整配置。

# 7. 代码规范
- 遵守PEP8和Django官方编码规范。
- 命名使用蛇形命名法。
- 代码注释规范，易于维护。


# 8. 任务完成后不需要编写md文件进行总结